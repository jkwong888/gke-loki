---
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
  name: loki-grafana
  namespace: loki
---
# Source: grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
  name: loki-grafana-test
  namespace: loki
---
# Source: grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: loki-grafana
  namespace: loki
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: "YWRtaW4="
  admin-password: "ZWFwUnZ0dUoyRElpajJoVDhHR3hVNXBsYkVSRnZCd2VpY0FzbzlQdg=="
  ldap-toml: ""
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-grafana
  namespace: loki
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain =
---
# Source: grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
  name: loki-grafana-clusterrole
rules: []
---
# Source: grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: loki-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: loki-grafana
    namespace: loki
roleRef:
  kind: ClusterRole
  name: loki-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: loki-grafana
  namespace: loki
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [loki-grafana]
- apiGroups:      [""]
  resources:      ["configmaps"]
  verbs:          ["list","watch","get"]

---
# Source: grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: loki-grafana
  namespace: loki
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: loki-grafana
subjects:
- kind: ServiceAccount
  name: loki-grafana
  namespace: loki
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-grafana
  namespace: loki
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-grafana
  namespace: loki
  labels:
    helm.sh/chart: grafana-6.38.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: loki-grafana
    app.kubernetes.io/version: "9.1.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: loki-grafana
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: loki-grafana
      annotations:
        checksum/config: e69e93c13f79948867e47f2d5b525962d7f0a7f133eaa2726bc6705083a82892
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 0b0964e373350987dad774a2b76f7757e52f394c6ab77ced1e33e76b9e1a65d5
    spec:      
      serviceAccountName: loki-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "grafana/grafana:9.1.5"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: sc-dashboard-volume
              mountPath: "/tmp/dashboards"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: loki-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: loki-grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
        - name: grafana-sc-dashboard
          image: "kiwigrid/k8s-sidecar:0.0.11"
          imagePullPolicy: IfNotPresent
          env:
            - name: LABEL
              value: "grafana_dashboard"
            - name: FOLDER
              value: "/tmp/dashboards"
          volumeMounts:
            - name: sc-dashboard-volume
              mountPath: "/tmp/dashboards"
      volumes:
        - name: config
          configMap:
            name: loki-grafana
        - name: storage
          emptyDir: {}
        - name: sc-dashboard-volume
          emptyDir: {}
